#!/usr/bin/env ruby
require "rubygems"
require "ruby_parser"
require "ruby2ruby"

class Ruby2Brat < Ruby2Ruby
  REPLACE = { :puts => :p,
    :initialize => :init,
    :inject => :reduce,
    :[] => :get,
    :[]= => :set
  }

  def initialize *args
    super
    self.auto_shift_type = true
    self.expected = String
    self.require_empty = false
    @current_scope = []
  end

  def current_object
    @current_scope.join '.'
  end

  def process_and sexp
    rhs = process sexp[0]
    lhs = process sexp[1]

    "(#{rhs}).&&({#{lhs}})"
  end

  def process_args(exp)
    #Borrowed from ruby2ruby
    args = []

    until exp.empty? do
      arg = exp.shift
      case arg
      when Symbol, String
        args << arg
      when Array
        case arg.first
        when :block
          asgns = {}
          arg[1..-1].each do |lasgn|
            asgns[lasgn[1]] = process(lasgn)
          end

          args.each_with_index do |name, index|
            args[index] = asgns[name] if asgns.has_key? name
          end
        else
          raise "unknown arg type #{arg.first.inspect}"
        end
      else
        raise "unknown arg type #{arg.inspect}"
      end
    end

    return args.join ', '
  end

  def process_block sexp
    process_scope sexp
  end

  def process_call sexp
    target = process(sexp[0]) || current_object
    method = REPLACE[sexp[1]] || sexp[1]
    args = process sexp[2]

    sexp.clear

    if target.empty?
      "#{method}(#{args})"
    else
      "#{target}.#{method}(#{args})"
    end
  end

  def process_cdecl sexp
    if @inside_class
      const = sexp[0]

      const = process(const) if sexp? const

      if @inside_method
        "my.#{sexp[0]} = #{process sexp[1]}"
      else
        "#{current_object}.#{sexp[0]} = #{process sexp[1]}"
      end
    else
      super sexp
    end
  end

  def process_class sexp
    parent = process sexp.delete_at 1

    module_name = sexp[0].to_s
    @current_scope << module_name
    @inside_class = true

    module_name = current_object

    output = "#{module_name} = object.new\n" << process(sexp[1])

    @inside_class = false
    @current_scope.pop

    if parent
      output <<
      if current_object.empty?
        "#{module_name}.parent = #{parent}\n"
      else
        "#{module_name}.parent = #{current_object}.#{parent}\n"
      end
    end

    sexp.clear

    output
  end

  def process_colon2 sexp
    "#{process sexp[0]}.#{sexp[1]}"
  end

  def process_cvar sexp
    name = sexp[0].to_s[2..-1]

    if @inside_class
      "#{current_object}.#{name}"
    else
      "#{current_object}.parent.#{name}"
    end
  end

  def process_cvasgn sexp
    name = sexp[0].to_s[2..-1]
    rhs = "{ #{process sexp[1]}}()"
    "my.#{name} = #{rhs}"
  end

  def process_cvdecl sexp
    name = sexp[0].to_s[2..-1]
    rhs = "{ #{process sexp[1]}}()"
    "#{current_object}.#{name} = #{rhs}"
  end

  def process_defn sexp
    method_name = sexp[0].to_s
    args = process sexp[1]
    @inside_method = true
    body = protect_body process(sexp[2])
    @inside_method = false

    @return = false

    if method_name == "initialize"
      method_name = "init"
    end

    sexp.clear

    args << " |" unless args.empty?

    if current_object.empty?
      "#{method_name} = { #{args} \n	#{body} }"
    else
      "#{current_object}.#{method_name} = { #{args} \n	#{body} }"
    end
  end

  #Wraps body in a protect call which collects return values
  #via exceptions.
  def protect_body body
    if @return
      <<-BRAT
      protect {
      #{body}
      }
      rescue: { e |
        true? e.type == :return
          { e.return_value }
          { throw e }
      }
      BRAT
    else
      body
    end
  end

  def process_if sexp
    condition = process sexp[0]
    true_action = process sexp[1]
    false_action = process sexp[2]

    sexp.clear

    <<-BRAT
    true? { #{condition} },
    { #{true_action} },
    { #{false_action} }
    BRAT
  end

  def process_iasgn sexp
    if @inside_method
      lhs = "my.#{sexp[0].to_s[1..-1]}"
    else
      lhs = "#{current_object}.#{sexp[0].to_s[1..-1]}"
    end
    rhs = process sexp[1]

    "#{lhs} = #{rhs}"
  end

  def process_iter sexp
    block_args = []

    if sexp[1]
      case sexp[1][0]
      when :lasgn
        block_args << sexp[1][1]
      when :masgn
        sexp[1][1].shift
        sexp[1][1].each do |v|
          block_args << v[1]
        end
      else
        warn "Unexpected type in block: #{sexp[1].inspect}"
      end
    end

    sexp[0][3] << Sexp.new(:brat_block, "{ #{block_args.join(', ')} #{'|' unless block_args.empty? } #{process sexp[2] || ''}}")
    process sexp[0]
  end

  def process_ivar sexp
    "my.#{sexp[0].to_s[1..-1]}"
  end

  def process_brat_block sexp
    sexp[0]
  end

  def process_lasgn sexp
    lhs = sexp[0]
    rhs = process sexp[1]
    sexp.clear

    "#{lhs} = #{rhs}"
  end

  def process_lit sexp
    if sexp[0].is_a? Range
      "#{sexp[0].begin}, #{sexp[0].end}"
    else
      "#{sexp[0].inspect}"
    end
  end

  def process_lvar sexp
    output = sexp[0].to_s

    sexp.clear

    output
  end

  def process_module sexp
    module_name = sexp[0].to_s
    @current_scope << module_name

    output = "#{current_object} = object.new\n" << process(sexp[1])

    @current_scope.pop

    sexp.clear

    output
  end

  def process_nil sexp
    "null"
  end

  def process_or sexp
    rhs = process sexp[0]
    lhs = process sexp[1]

    "(#{rhs}).||({#{lhs}})"
  end

  def process_return sexp
    @return = true
    value = sexp[0]
    sexp.clear

    <<-BRAT
    return_value$ = {
      #{process value}
    }

    e$ = exception.new("", :return)
    e$.return_value = return_value$
    throw(e$)
    BRAT
  end

  def process_scope sexp
    output = sexp.map do |s|
      process s
    end.join("\n") << "\n"

    sexp.clear

    output
  end

  def sexp? sexp
    sexp.is_a? Sexp
  end
end

#Test
puts Ruby2Brat.new.process RubyParser.new.parse $stdin.read
